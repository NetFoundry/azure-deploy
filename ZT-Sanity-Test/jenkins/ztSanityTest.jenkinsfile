pipeline {
  agent {
    docker {
        image "netfoundry/jenkins-slave-edge:latest"
        registryCredentialsId 'dockerhub'
        registryUrl 'https://index.docker.io/v1/'
        alwaysPull true
    }
  }
  options {
    disableConcurrentBuilds()
    parallelsAlwaysFailFast()
  }
  parameters {
    booleanParam(name: 'DEPLOY_RESOURCES_NETFOUNDRY', defaultValue: true, description: 'Deploy NetFoundry Network, Fabric Routers')
    booleanParam(name: 'DESTROY_RESOURCES_NETFOUNDRY', defaultValue: true, description: 'Destroy NetFoundry Network, Routers')
    booleanParam(name: 'CONFIGURE_SERVICES_NETFOUNDRY', defaultValue: true, description: 'Destroy NetFoundry Network, Routers')
    booleanParam(name: 'DEPLOY_RESOURCES_OCP', defaultValue: true, description: 'Deploy Cloud Network, Edge Routers')
    booleanParam(name: 'CREATE_HOSTS_FILE', defaultValue: true, description: 'Create hosts.ini file for ssh connections')
    booleanParam(name: 'DESTROY_RESOURCES_ALL', defaultValue: true, description: 'Destroy ALL Resources')
    booleanParam(name: 'TEST_CASE01', defaultValue: true, description: 'Test Case 01')
    booleanParam(name: 'TEST_CASE02', defaultValue: true, description: 'Test Case 02')
    booleanParam(name: 'TEST_CASE03', defaultValue: true, description: 'Test Case 03')
  }
    stages {
    stage('Set up WORKSPACE') {
      steps {
        // all stages use the same container and WORKSPACE in that running container, and so only one checkout is necessary
        checkout scm
        withCredentials([file(credentialsId: 'cldeng-creds-prod', variable: 'NETFOUNDRY_CREDS_FILE')]) {
          writeFile file: 'ZT-Sanity-Test/ansible/credentials-cldeng.json', text: readFile(NETFOUNDRY_CREDS_FILE)
        }
        withCredentials([file(credentialsId: 'OCI_API_KEY', variable: 'OCI_API_KEY')]) {
          writeFile file: 'oci.pem', text: readFile(OCI_API_KEY)
        }
        sh ''' #!/bin/bash
          set -Eeuxo pipefail
          /usr/bin/python3 -m pip install --upgrade pip
          pip install netfoundry
          pip install oci 
          ansible-galaxy collection install netfoundry.platform
          ansible-galaxy collection install oracle.oci
        '''
        sh ''' #!/bin/bash
          set -Eeuxo pipefail
          ssh-keygen -b 2048 -t rsa -f ~/.ssh/id_rsa -q -N "" 0>&-
          cat ~/.ssh/id_rsa
          ls ${WORKSPACE}
        '''
      }
    }
    stage('Deploy Resources in NETFOUNDRY') {
      when { expression { params.DEPLOY_RESOURCES_NETFOUNDRY }}
      steps {
        sh ''' #!/bin/bash
          set -Eeuxo pipefail
          eval  ansible-playbook ${WORKSPACE}/ZT-Sanity-Test/ansible/local.yml --tags always,netfoundry,create,pretask --skip-tags delete,service,ocp,test -e virtual_machines=localhost -e remote_conn=local
        '''
      }
    }
    stage('Deploy Resources in OCP') {
      when { expression { params.DEPLOY_RESOURCES_OCP }}
      steps {
        sh ''' #!/bin/bash
          set -Eeuxo pipefail
          eval  ansible-playbook ${WORKSPACE}/ZT-Sanity-Test/ansible/local.yml --tags always,ocp,create,pretask --skip-tags delete,get,netfoundry,test -e virtual_machines=localhost -e remote_conn=local
        '''
      }
    }
    stage('Configure Services in NETFOUNDRY') {
      when { expression { params.CONFIGURE_SERVICES_NETFOUNDRY }}
      steps {
        sh ''' #!/bin/bash
          set -Eeuxo pipefail
          eval  ansible-playbook ${WORKSPACE}/ZT-Sanity-Test/ansible/local.yml --tags always,netfoundry,create,pretask --skip-tags delete,network,ocp,test -e virtual_machines=localhost -e remote_conn=local
          '''
      }
    }
    stage('Create hosts.ini file for ssh connections') {
      when { expression { params.CREATE_HOSTS_FILE }}
      steps {
        sh ''' #!/bin/bash
          set -Eeuxo pipefail
          eval  ansible-playbook ${WORKSPACE}/ZT-Sanity-Test/ansible/local.yml --tags test,get,pretask,always --skip-tags ocp,netfoundry,router -e virtual_machines=localhost -e remote_conn=local
          ls ${WORKSPACE}
        '''
      }
    }
    stage('Test Case 01') {
      when { expression { params.TEST_CASE01 }}
      steps {
        sh ''' #!/bin/bash
        set -Eeuxo pipefail
        eval export ANSIBLE_HOST_KEY_CHECKING=False
        eval  ansible-playbook ${WORKSPACE}/ZT-Sanity-Test/ansible/local.yml --tags test,router,test1,pretask --skip-tags get,always,test2,test3,netfoundry,ocp -e virtual_machines=customer-edge-routers -i ${WORKSPACE}/hosts.ini -u ziggy -e remote_conn=ssh
        '''
      }
    }
    stage('Test Case 02') {
      when { expression { params.TEST_CASE01 }}
      steps {
        sh ''' #!/bin/bash
        set -Eeuxo pipefail
        eval export ANSIBLE_HOST_KEY_CHECKING=False
        eval  ansible-playbook ${WORKSPACE}/ZT-Sanity-Test/ansible/local.yml --tags test,router,test2,pretask --skip-tags get,always,test1,test3,netfoundry,ocp -e virtual_machines=customer-edge-routers -i ${WORKSPACE}/hosts.ini -u ziggy -e remote_conn=ssh
        '''
      }
    }
    stage('Test Case 03') {
      when { expression { params.TEST_CASE01 }}
      steps {
        sh ''' #!/bin/bash
        set -Eeuxo pipefail
        eval export ANSIBLE_HOST_KEY_CHECKING=False
        eval  ansible-playbook ${WORKSPACE}/ZT-Sanity-Test/ansible/local.yml --tags test,router,test3,pretask --skip-tags get,always,test1,test2,netfoundry,ocp -e virtual_machines=customer-edge-routers -i ${WORKSPACE}/hosts.ini -u ziggy -e remote_conn=ssh
        '''
      }
    }
    stage('Destroy All Resources') {
      when { expression { params.DESTROY_RESOURCES_ALL }}
      steps {
        // delete instances in OCP first
        sh ''' #!/bin/bash
          set -Eeuxo pipefail
          eval  ansible-playbook ${WORKSPACE}/ZT-Sanity-Test/ansible/local.yml --tags always,delete,pretask,ocp,instance --skip-tags get,vnc,create,test,netfoundry -e virtual_machines=localhost -e remote_conn=local
        '''
        // delete all other resources
        sh ''' #!/bin/bash
          set -Eeuxo pipefail
          eval  ansible-playbook ${WORKSPACE}/ZT-Sanity-Test/ansible/local.yml --tags always,delete,pretask,ocp,vnc,netfoundry,network --skip-tags get,instance,create,test,service -e virtual_machines=localhost -e remote_conn=local
        '''
      }
    }
  }
}
