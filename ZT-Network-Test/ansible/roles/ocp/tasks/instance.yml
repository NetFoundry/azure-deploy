---
##############################
# Accept EULA for Markeplace #
##############################

- set_fact:
    app_catalog_listing_id: "ocid1.appcataloglisting.oc1..aaaaaaaaf4ixpn4pxjmers6bc6kw7fzj3ub6dm32vi6azn2v6jcfwwwfea5q"
  tags: create

- name: Get all the resource versions of the listing
  oci_compute_app_catalog_listing_resource_version_facts:
    listing_id: "{{ app_catalog_listing_id }}"
  register: all_resource_versions_result
  tags: create

- set_fact:
    resource_versions: "{{ all_resource_versions_result.app_catalog_listing_resource_versions }}"
    latest_resource_version: "{{ all_resource_versions_result.app_catalog_listing_resource_versions[0].listing_resource_version }}"
    app_catalog_image_id: "{{ all_resource_versions_result.app_catalog_listing_resource_versions[0].listing_resource_id }}"
  tags: create

- name: Create an agreement for the listing
  oci_compute_app_catalog_listing_resource_version_agreement_facts:
    listing_id: "{{ app_catalog_listing_id }}"
    resource_version: "{{ latest_resource_version }}"
  register: agreement_result
  tags: create

- set_fact:
    agreement: "{{ agreement_result.app_catalog_listing_resource_version_agreement }}"
  tags: create

- name: Create subscription if it does not exist
  oci_compute_app_catalog_subscription:
    compartment_id: "{{ oci_compartment_id }}"
    eula_link: "{{ agreement.eula_link }}"
    listing_id: "{{ app_catalog_listing_id }}"
    listing_resource_version: "{{ latest_resource_version }}"
    oracle_terms_of_use_link: "{{ agreement.oracle_terms_of_use_link }}"
    signature: "{{ agreement.signature }}"
    time_retrieved: "{{ agreement.time_retrieved }}"
  register: create_subscription_result
  tags: create

########################
# Create ocp instances #
########################

###############################
# On NetFoundry Network First #
###############################
- name: Provision hosted edge router in OCP
  netfoundry_router:
    name: "{{ '.'.join([network_prefix, item.1]) }}"
    attributes: 
      - "#{{ item.1 }}"
      - "#{{ item.0.name }}"
      - "#ocp"
    tunnelerEnabled: True
    rotateKey: True
    network: "{{ netfoundry_network.network }}"
    state: PROVISIONED
    wait: 600
  with_subelements: 
    - "{{ oci_regions }}"
    - az
  ignore_errors: yes
  register: ocp_er_response
  tags: 
    - create

- name: Create the list of routers and their details to deploy in OCI
  set_fact:
    er_ocp_list: "{{ ocp_er_response.results | json_query('[*].{name: message.name, region: message.attributes, regKey: message.registrationKey}') }}"
  tags: 
    - create

- name: Collect the NF OCI ER Info
  netfoundry_info:
    network: "{{ network_prefix }}"
    inventory: True
    session: "{{ netfoundry_organization.session }}"
  register: netfoundry_network
  ignore_errors: yes
  tags:
    - create  

###########################################################
# In case edge router gets hung in the provisioning state #
###########################################################
- name: Check if any routers are still in Provisioning State
  set_fact:
    edge_routers_for_deletion:  "{{ netfoundry_network.network.customer_edge_routers | json_query('[? status == `PROVISIONING`].{name: name}') }}"
  tags: 
    - create

#######################################
# If it does, delete and re-provision #
#######################################
- name: Delete Edge Routers for OCP
  netfoundry_router:
    name: "{{ item.name }}"
    network: "{{ netfoundry_network.network }}"
    state: DELETED
  loop: "{{ edge_routers_for_deletion }}"
  when: edge_routers_for_deletion != []
  register: ocp_er_delete_response
  tags: 
    - create

- name: Re-Provision hosted edge router in OCP
  netfoundry_router:
    name: "{{ '.'.join([network_prefix, item.1]) }}"
    attributes: 
      - "#{{ item.1 }}"
      - "#{{ item.0.name }}"
      - "#ocp"
    tunnelerEnabled: True
    rotateKey: True
    network: "{{ netfoundry_network.network }}"
    state: PROVISIONED
    wait: 600
  with_subelements: 
    - "{{ oci_regions }}"
    - az
  when: edge_routers_for_deletion != []
  register: ocp_er_response
  tags: 
    - create
    
################################################################
# Region needs to be extracted from the edge router attributes #
################################################################
- name: Update the list of routers and their details to deploy in OCI
  set_fact:
    er_ocp_list: "{{ ocp_er_response.results | json_query('[*].{name: message.name, region: message.attributes, regKey: message.registrationKey}') }}"
  when: edge_routers_for_deletion != []
  tags: 
    - create

- name: Change the region parameter to a string from a list
  set_fact:
    name: "{{ item.name }}"
    region: "{{ (item.region | map('regex_replace', '#', '') | list | intersect(oci_regions | json_query('[*].name'))).0 }}"
    az: "{{ (item.region | map('regex_replace', '#', '') | list | intersect(oci_regions | json_query('[*].az') | flatten)).0 }}"
    regKey: "{{ item.regKey }}"
  loop: "{{ er_ocp_list }}"
  when: "{{ item.name is not none }}"
  register: updated_er_ocp_list
  tags:
    - create

############################################
# Then create the corresponding VMs in OCP #
############################################
- name: Create instance in oci
  oci_compute_instance:
    availability_domain: "{{ 'iTps:' + item.ansible_facts.az }}"
    compartment_id: "{{ oci_compartment_id }}"
    shape: VM.Standard.E4.Flex
    region: "{{ item.ansible_facts.region }}"
    create_vnic_details:
      assign_public_ip: true
      assign_private_dns_record: true
      display_name: "{{ item.ansible_facts.name }}"
      freeform_tags: "{{ oci_tag }}"
      nsg_ids: [ "{{ oci_sg_details.results | map(attribute='network_security_group') | selectattr('display_name', 'search', network_prefix+'-'+item.ansible_facts.region) |  json_query('[0].id') }}" ]
      skip_source_dest_check: true
      subnet_id: "{{ oci_subnet_details.results | map(attribute='subnet') | selectattr('display_name', 'search', network_prefix+'-'+item.ansible_facts.region) |  json_query('[0].id') }}"
    display_name: "{{ item.ansible_facts.name }}"
    freeform_tags: "{{ oci_tag }}"
    metadata:  { "ssh_authorized_keys" : "{{ public_ssh_key }}", 
                  "user_data" : "{{ ('#cloud-config\nruncmd:\n- [/opt/netfoundry/router-registration, ' + item.ansible_facts.regKey + ']') | b64encode }}" } 
    shape_config:
      ocpus: 2
      memory_in_gbs: 4
      baseline_ocpu_utilization: BASELINE_1_1
    source_details:
      source_type: image
      image_id: "{{ app_catalog_image_id }}"
    wait: yes
    state: present
  loop: "{{ updated_er_ocp_list.results }}"
  ignore_errors: yes
  when: item.ansible_facts is defined
  register: oci_vms_details
  tags: 
    - create

#####################################
# Fil in hosts file with public IPs #
#####################################

- name: List Cloud Instances
  oci_compute_instance_facts:
    compartment_id: "{{ oci_compartment_id }}"
    region: "{{ item.name }}"
  register: ocp_created_instances
  loop: "{{ oci_regions }}"
  tags:
    - create

- name: Filter the instances created by this script
  set_fact: 
    instances: "{{ ocp_created_instances.results | map(attribute='instances') | flatten | json_query('[? freeform_tags.Department == `Cloud Engineering` && lifecycle_state == `RUNNING` ].{name: display_name, primary_private_ip: primary_private_ip, primary_public_ip: primary_public_ip, lifecycle_state: lifecycle_state, freeform_tags: freeform_tags, availability_domain: availability_domain}') }}"
  tags:
    - create

- name: Create ocp edge router vm list
  set_fact: 
    customer_edge_routers: "{{ instances | selectattr('name', 'search', '1') | list }}"
  tags:
    - create

- name: Create ocp clients vm list
  set_fact: 
    clients: "{{ instances | selectattr('name', 'search', '2') | list }}"
  tags:
    - create

- name: Update hosts.ini file - customer-edge-routers
  ini_file:
    path: "{{ workspace }}/hosts.ini"
    section: ocp.customer-edge-routers
    option: "{{ item.primary_public_ip }}"
    allow_no_value: False
  loop: "{{ customer_edge_routers }}" 
  tags:
    - create

- name: Update hosts.ini file - client VMs
  ini_file:
    path: "{{ workspace }}/hosts.ini"
    section: ocp.clients
    option: "{{ item.primary_public_ip }}"
    allow_no_value: False
  loop: "{{ clients }}"
  tags:
    - create

 ########################
 # Delete ocp instances #
 ########################

- name: Delete instance in oci using name (when environment variable OCI_USE_NAME_AS_IDENTIFIER is set)
  oci_compute_instance:
    compartment_id: "{{ oci_compartment_id }}"
    display_name: "{{ '.'.join([network_prefix, item.1])  }}"
    region: "{{ item.0.name }}"
    wait: yes
    state: absent
  with_subelements: 
    - "{{ oci_regions }}"
    - az
  tags: 
    - delete

- name: Delete the corresponding ERs on NF Network
  netfoundry_router:
    name: "{{ '.'.join([network_prefix, item.1]) }}"
    network: "{{ netfoundry_network.network }}"
    state: DELETED
    wait: 600
  with_subelements: 
    - "{{ oci_regions }}"
    - az
  ignore_errors: yes
  tags: 
    - delete

- name: Update hosts.ini file - customer-edge-routers
  ini_file:
    path: "{{ workspace }}/hosts.ini"
    section: ocp.customer-edge-routers
    option: ""
    allow_no_value: True
  tags:
    - delete

- name: Update hosts.ini file - client VMs
  ini_file:
    path: "{{ workspace }}/hosts.ini"
    section: ocp.clients
    option: ""
    allow_no_value: True
  tags:
    - delete