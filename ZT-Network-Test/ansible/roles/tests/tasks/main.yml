---
- name: Collect the NF Network Info
  netfoundry_info:
    network: "{{ network_prefix }}"
    inventory: True
    session: "{{ netfoundry_organization.session }}"
  register: netfoundry_network
  ignore_errors: yes
  ##failed_when: "'failed' in netfoundry_network.module_stderr"
  tags:
    - get

- set_fact:
    endpoints: "{{ netfoundry_network.network.customer_edge_routers | json_query('[*].{name: name, attributes: attributes, tunnelerEnabled: tunnelerEnabled}') }}"
  tags:
    - get
  when: "{{ netfoundry_network }}"

- debug:
    msg: "{{ endpoints }}"
  tags:
    - get

- name: List Cloud Instances
  oci_compute_instance_facts:
    compartment_id: "{{ oci_compartment_id }}"
  register: ocp_instances
  tags:
    - get

- name: Filter the instances created by this script
  set_fact: 
    customer_edge_routers: "{{ ocp_instances.instances | json_query('[? freeform_tags.Department == `Cloud Engineering`].{display_name: display_name, primary_private_ip: primary_private_ip, primary_public_ip: primary_public_ip, lifecycle_state: lifecycle_state, freeform_tags: freeform_tags, availability_domain: availability_domain}') }}"
  tags:
    - get

- name: Update hosts.ini file
  ini_file:
    path: "{{ workspace }}/hosts.ini"
    section: customer-edge-routers
    option: "{{ item.primary_public_ip }}"
    allow_no_value: True
  loop: "{{ customer_edge_routers }}"
  when: customer_edge_routers != []
  tags:
    - get

- include_tasks: router.yml
  when: virtual_machines == 'customer-edge-routers'
  tags:
    - router
