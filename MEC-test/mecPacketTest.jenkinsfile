pipeline {
  agent {
    docker {
        image "netfoundry/jenkins-slave-edge:latest"
        registryCredentialsId 'dockerhub'
        registryUrl 'https://index.docker.io/v1/'
        alwaysPull true
    }
  }
  options {
    disableConcurrentBuilds()
    parallelsAlwaysFailFast()
  }
  parameters {
    booleanParam(name: 'DEPLOY_RESOURCES', defaultValue: true, description: 'Deploy Network, Client, Server to use for traffic generation and termination')
    booleanParam(name: 'DESTROY_RESOURCES', defaultValue: true, description: 'Destroy Network, Client, Server to use for traffic generation and termination')
    booleanParam(name: 'TEST_CASE01', defaultValue: true, description: 'Test Case 01')
  }
  environment {
    // Azure Credentials
    AZURE_TENANT = "25445e86-2ae6-4434-b116-25c66c27168d"
    AZURE_SUBSCRIPTION_ID = "53d234e8-b7ac-4f09-a517-508ed55e4cae"
  }
  stages {
    stage('Set up WORKSPACE') {
      steps {
        // all stages use the same container and WORKSPACE in that running container, and so only one checkout is necessary
        checkout scm
        withCredentials([file(credentialsId: 'cldeng-creds-prod', variable: 'NETFOUNDRY_CREDS_FILE')]) {
            writeFile file: 'credentials.json', text: readFile(NETFOUNDRY_CREDS_FILE)
        } 
        sh ''' #!/bin/bash
          set -Eeuxo pipefail
          /usr/bin/python3 -m pip install --upgrade pip
          pip install netfoundry --upgrade
          pip install azure-cli==2.26.1
          pip uninstall --no-input  ansible 
          pip uninstall --no-input  ansible-base
          pip install "ansible==4.3.0"
          ansible-galaxy collection install azure.azcollection
          ansible-galaxy collection install azure.azcollection --force
          wget https://raw.githubusercontent.com/ansible-collections/azure/dev/requirements-azure.txt
          sudo pip install -r requirements-azure.txt
          sudo pip install azure-mgmt-datalake-nspkg==3.0.1
        '''
      }
    }
    stage('Deploy Resources in Azure and on MEC') {
      when { expression { params.DEPLOY_RESOURCES }}
      steps {
        withCredentials([usernamePassword(credentialsId: 'Azure-MEC-Test-User', usernameVariable: 'AZURE_CLIENT_ID', passwordVariable: 'AZURE_SECRET')]) {
           sh ''' #!/bin/bash
            set -Eeuxo pipefail
            eval  ansible-playbook MEC-test/infrastucture_setup.yml --tags create
            '''
        }
      }
    }
    stage('Test Case 01') {
      when { expression { params.TEST_CASE01 }}
      steps {
        withCredentials([usernamePassword(credentialsId: 'Azure-MEC-Test-User', usernameVariable: 'AZURE_CLIENT_ID', passwordVariable: ' AZURE_SECRET')]) {
          script {
            catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
              sh ''' #!/bin/bash
              set -Eeuxo pipefail
              ansible-playbook  MEC-test/test_cases.yml -i azure-deploy/MEC-test/hosts.ini --tags azure-listen -e routers=azure-routers -u ziggy
              ansible-playbook  MEC-test/test_cases.yml -i azure-deploy/MEC-test/hosts.ini --tags mec-client -e routers=mec-routers -u ziggy
              ansible-playbook  MEC-test/test_cases.yml -i azure-deploy/MEC-test/hosts.ini --tags mec-listen -e routers=mec-routers -u ziggy
              ansible-playbook  MEC-test/test_cases.yml -i azure-deploy/MEC-test/hosts.ini --tags azure-client -e routers=azure-routers -u ziggy
              ansible-playbook  MEC-test/test_cases.yml -i azure-deploy/MEC-test/hosts.ini --tags azure-result -e routers=azure-routers -u ziggy -v
              ansible-playbook  MEC-test/test_cases.yml -i azure-deploy/MEC-test/hosts.ini --tags mec-result -e routers=mec-routers -u ziggy -v
              '''
            }
          }
        }
      }
    }
    stage('Destroy All Resource built in Azure and on MEC') {
      when { expression { params.DESTROY_RESOURCES }}
      steps {
        withCredentials([usernamePassword(credentialsId: 'Azure-MEC-Test-User', usernameVariable: 'AZURE_CLIENT_ID', passwordVariable: ' AZURE_SECRET')]) {
          sh ''' #!/bin/bash
            set -Eeuxo pipefail
            eval  ansible-playbook MEC-test/infrastucture_setup.yml --tags delete
            '''
        }
      }
    }
  }
}
